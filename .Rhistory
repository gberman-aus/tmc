for (i in 1:length(list_exclusivity)){
list_exclusivity[i] <- paste(project_path, "outputs/exclusivity", list_exclusivity[i], sep="/")
exclusivity[[i]] <- readRDS(list_exclusivity[i])
}
} else {
for (i in 1:length(list_models)){
exlcusivity[i] <- "Exclusivity not calculated for models with content covariates"
}
}
if (length(list_exclusivity) > 0){
for (i in 1:length(list_exclusivity)){
list_exclusivity[i] <- paste(project_path, "outputs/exclusivity", list_exclusivity[i], sep="/")
exclusivity[[i]] <- readRDS(list_exclusivity[i])
}
} else {
for (i in 1:length(list_models)){
exlcusivity[i] <- "Exclusivity not calculated for models with content covariates"
}
}
for (i in 1:length(list_semcoh)){
list_semcoh[i] <- paste(project_path, "outputs/semcoh", list_semcoh[i], sep="/")
semcoh[[i]] <- readRDS(list_semcoh[i])
}
if (length(list_sparsity) > 0){
for (i in 1:length(list_sparsity)){
list_sparsity[i] <- paste(project_path, "outputs/sparsity", list_sparsity[i], sep="/")
sparsity[[i]] <- readRDS(list_sparsity[i])
}
} else {
for (i in 1:length(list_models)){
sparsity[i] <- "Sparsity not calculated for models without content covariates"
}
}
class(out) <- "selectModel"
out <- list(runout=runout, semcoh=semcoh, exclusivity=exlcusivity, sparsity=sparsity)
# initiate variables
runout <- list()
semcoh <- list()
exclusivity <- list()
sparsity <- list()
# Load all the .RDS files in /project_name/outputs/models
list_models <- list.files(path = paste(project_path, "outputs/models/", sep="/"), pattern = "*.RDS")
list_exclusivity <- list.files(path = paste(project_path, "outputs/exclusivity/", sep="/"), pattern = "*.RDS")
list_semcoh <- list.files(path = paste(project_path, "outputs/semcoh/", sep="/"), pattern = "*.RDS")
list_sparsity <- list.files(path = paste(project_path, "outputs/sparsity/", sep="/", pattern = "*.RDS"))
for (i in 1:length(list_models)){
list_models[i] <- paste(project_path, "outputs/models", list_models[i], sep="/")
runout[[i]] <- readRDS(list_models[i])
}
if (length(list_exclusivity) > 0){
for (i in 1:length(list_exclusivity)){
list_exclusivity[i] <- paste(project_path, "outputs/exclusivity", list_exclusivity[i], sep="/")
exclusivity[[i]] <- readRDS(list_exclusivity[i])
}
} else {
for (i in 1:length(list_models)){
exclusivity[i] <- "Exclusivity not calculated for models with content covariates"
}
}
for (i in 1:length(list_semcoh)){
list_semcoh[i] <- paste(project_path, "outputs/semcoh", list_semcoh[i], sep="/")
semcoh[[i]] <- readRDS(list_semcoh[i])
}
if (length(list_sparsity) > 0){
for (i in 1:length(list_sparsity)){
list_sparsity[i] <- paste(project_path, "outputs/sparsity", list_sparsity[i], sep="/")
sparsity[[i]] <- readRDS(list_sparsity[i])
}
} else {
for (i in 1:length(list_models)){
sparsity[i] <- "Sparsity not calculated for models without content covariates"
}
}
class(out) <- "selectModel"
out <- list(runout=runout, semcoh=semcoh, exclusivity=exclusivity, sparsity=sparsity)
plotModels(out)
plot(out)
saveRDS(out, paste(project_path, "outputs/models/combined_models.RDS", sep="/"))
rm(list = ls())
gc()
# requirements
library(stm)
library(yaml)
working_directory <- Sys.getenv("working_path")
# make sure we are in the right directory
setwd(working_directory)
getwd()
# Load the .yml files
configs <- read_yaml('configuration/corpus_config.yml')
training_plan <- read_yaml('configuration/training_config.yml')
project_path <- paste('projects', configs$project_details$name, sep="/")
# initiate variables
runout <- list()
semcoh <- list()
exclusivity <- list()
sparsity <- list()
# Load all the .RDS files in /project_name/outputs/models
list_models <- list.files(path = paste(project_path, "outputs/models/", sep="/"), pattern = "*.RDS")
list_exclusivity <- list.files(path = paste(project_path, "outputs/exclusivity/", sep="/"), pattern = "*.RDS")
list_semcoh <- list.files(path = paste(project_path, "outputs/semcoh/", sep="/"), pattern = "*.RDS")
list_sparsity <- list.files(path = paste(project_path, "outputs/sparsity/", sep="/", pattern = "*.RDS"))
for (i in 1:length(list_models)){
list_models[i] <- paste(project_path, "outputs/models", list_models[i], sep="/")
runout[[i]] <- readRDS(list_models[i])
}
if (length(list_exclusivity) > 0){
for (i in 1:length(list_exclusivity)){
list_exclusivity[i] <- paste(project_path, "outputs/exclusivity", list_exclusivity[i], sep="/")
exclusivity[[i]] <- readRDS(list_exclusivity[i])
}
} else {
for (i in 1:length(list_models)){
exclusivity[i] <- "Exclusivity not calculated for models with content covariates"
}
}
for (i in 1:length(list_semcoh)){
list_semcoh[i] <- paste(project_path, "outputs/semcoh", list_semcoh[i], sep="/")
semcoh[[i]] <- readRDS(list_semcoh[i])
}
if (length(list_sparsity) > 0){
for (i in 1:length(list_sparsity)){
list_sparsity[i] <- paste(project_path, "outputs/sparsity", list_sparsity[i], sep="/")
sparsity[[i]] <- readRDS(list_sparsity[i])
}
} else {
for (i in 1:length(list_models)){
sparsity[i] <- "Sparsity not calculated for models without content covariates"
}
}
# We now have an R object that is formatted in the same was an STM selectodel. We can use this with plotModels().
class(out) <- "selectModel"
out <- list(runout=runout, semcoh=semcoh, exclusivity=exclusivity, sparsity=sparsity)
saveRDS(out, paste(project_path, "outputs/models/combined_models.RDS", sep="/"))
# Load the compbined RDS file of the trained models
models <- readRDS(paste(project_path, "outputs/models/combined_models.RDS",, sep="/"))
# Load the compbined RDS file of the trained models
models <- readRDS(paste(project_path, "outputs/models/combined_models.RDS", sep="/"))
rm(out, runout, semcoh, sparsity)
plot(models)
plotModels(moels)
plotModels(models)
View(models)
# for each value of K, we need mean values of exlcusivity and semantic coherence
out[['exclus']] <- mean(unlist(models$exclusivity))
for (k in 1:length(models$exclusivity)){
out[['K']] <- k
out[['exclus']] <- mean(unlist(models$exclusivity[k,]))
}
# for each value of K, we need mean values of exlcusivity and semantic coherence
out <- NULL
for (k in 1:length(models$exclusivity)){
out[['K']] <- k
out[['exclus']] <- mean(unlist(models$exclusivity[k,]))
}
for (k in 1:length(models$exclusivity)){
out[['K']] <- k
out[['exclus']] <- mean(unlist(models$exclusivity[k]))
}
View(out)
length(models)
length(models$exclusivity)
k
# for each value of K, we need mean values of exlcusivity and semantic coherence
out <- NULL
for (k in 1:length(models$exclusivity)){
out['K'] <- k
out['exclus'] <- mean(unlist(models$exclusivity[k]))
}
out
models$exclusivity
# for each value of K, we need mean values of exlcusivity and semantic coherence
out <- NULL
for (k in 1:length(models$exclusivity)){
out['K'] <- k
out['exclus'] <- mean(unlist(models[['exclusivity']][[k]]))
}
# for each value of K, we need mean values of exlcusivity and semantic coherence
out <- NULL
for (k in 1:length(models$exclusivity)){
out[['K']] <- k
out[['exclus']] <- mean(unlist(models[['exclusivity']][[k]]))
}
View(out)
df <- models$exclusivity
View(df)
df <- as.data.frame(do.call(rbind, models$exclusivity))
View(df)
df <- as.data.frame(do.call(cbind, models$exclusivity))
View(df)
# for each value of K, we need mean values of exclusivity and semantic coherence
exc <- as.data.frame(do.call(rbind, models$exclusivity))
semcoh<- as.data.frame(do.call(rbind, models$semcoh))
View(semcoh)
rowMeans(exc)
out <- data.frame(c("K","exlus","semcoh"))
View(out)
rm(out)
exc_means <- rowMeans(exc)
semcoh_means <- rowMeans(semcoh)
# for each value of K, we need mean values of exclusivity and semantic coherence
K <- c(5, 10, 15, 20, 25) # note: will need to replace this later.
out <- data.frame(K, exc_means, semcoh_means, c("K","exlus","semcoh"))
out <- data.frame(K, exc_means, semcoh_means)
colnames(out) <- c("K","exlus","semcoh")
View(out)
out <- data.frame(exc_means, semcoh_means)
colnames(out) <- c("exlus","semcoh")
rownames(out) <- K
View(out)
out <- data.frame(K, exc_means, semcoh_means)
colnames(out) <- c("K","exclus","semcoh")
plotModels(out)
library(ggplot2)
install.packages(ggplot2"")
install.packages("ggplot2")
renv::snapshot()
exc_v_semcoh <- ggplot(out, aes(x=semcoh, y=exclus))+
geom_point() +
geom_text(
label=out$K,
nudget_x = 0.25, nudge_y = 0.25,
check_overlap = TRUE
)
library(ggplot2)
library(ggplot2)
installed.packages()
# Requirements
library(stm)
library(yaml)
library(ggplot2)
exc_v_semcoh <- ggplot(out, aes(x=semcoh, y=exclus))+
geom_point() +
geom_text(
label=out$K,
nudget_x = 0.25, nudge_y = 0.25,
check_overlap = TRUE
)
exc_v_semcoh <- ggplot(out, aes(x=semcoh, y=exclus))+
geom_point() +
geom_text(
label=out$K,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = TRUE
)
exc_v_semcoh
exc_v_semcoh <- ggplot(out, aes(x=semcoh, y=exclus))+
geom_point() +
geom_text(
label=out$K,
#nudge_x = 0.25, nudge_y = 0.25,
check_overlap = TRUE
)
exc_v_semcoh
exc_v_semcoh <- ggplot(out, aes(x=semcoh, y=exclus))+
geom_point() +
geom_text(
label=out$K,
nudge_y = 0.25,
check_overlap = TRUE
)
exc_v_semcoh
exc_v_semcoh <- ggplot(out, aes(x=semcoh, y=exclus))+
geom_point() +
geom_text(
label=out$K,
nudge_x = 0.25,
check_overlap = TRUE
)
exc_v_semcoh
exc_v_semcoh <- ggplot(out, aes(x=semcoh, y=exclus))+
geom_point() +
geom_text(
label=out$K,
nudge_x = 0.5,
check_overlap = TRUE
)
exc_v_semcoh
exc_v_semcoh <- ggplot(out, aes(x=semcoh, y=exclus))+
geom_point() +
geom_text(
label=out$K,
nudge_x = 0.5,
check_overlap = TRUE) +
labs(x = "Semantic coherence", y = "Exclusivity", title = "Mean exclusivity vs. semantic coherence for trained models.")
exc_v_semcoh
View(models)
# Load the .yml files
configs <- read_yaml('configuration/corpus_config.yml')
training_plan <- read_yaml('configuration/training_config.yml')
project_path <- paste('projects', configs$project_details$name, sep="/")
# initiate variables
runout <- list()
semcoh <- list()
exclusivity <- list()
sparsity <- list()
# Load all the .RDS files in /project_name/outputs/models
list_models <- list.files(path = paste(project_path, "outputs/models/", sep="/"), pattern = "*.RDS")
list_exclusivity <- list.files(path = paste(project_path, "outputs/exclusivity/", sep="/"), pattern = "*.RDS")
list_semcoh <- list.files(path = paste(project_path, "outputs/semcoh/", sep="/"), pattern = "*.RDS")
list_sparsity <- list.files(path = paste(project_path, "outputs/sparsity/", sep="/", pattern = "*.RDS"))
for (i in 1:length(list_models)){
list_models[i] <- paste(project_path, "outputs/models", list_models[i], sep="/")
runout[[i]] <- readRDS(list_models[i])
}
if (length(list_exclusivity) > 0){
for (i in 1:length(list_exclusivity)){
list_exclusivity[i] <- paste(project_path, "outputs/exclusivity", list_exclusivity[i], sep="/")
exclusivity[[i]] <- readRDS(list_exclusivity[i])
}
} else {
for (i in 1:length(list_models)){
exclusivity[i] <- "Exclusivity not calculated for models with content covariates"
}
}
for (i in 1:length(list_semcoh)){
list_semcoh[i] <- paste(project_path, "outputs/semcoh", list_semcoh[i], sep="/")
semcoh[[i]] <- readRDS(list_semcoh[i])
}
if (length(list_sparsity) > 0){
for (i in 1:length(list_sparsity)){
list_sparsity[i] <- paste(project_path, "outputs/sparsity", list_sparsity[i], sep="/")
sparsity[[i]] <- readRDS(list_sparsity[i])
}
} else {
for (i in 1:length(list_models)){
sparsity[i] <- "Sparsity not calculated for models without content covariates"
}
}
# We now have an R object that is formatted in the same was an STM selectodel. We can use this with plotModels().
class(out) <- "selectModel"
out <- list(runout=runout, semcoh=semcoh, exclusivity=exclusivity, sparsity=sparsity)
saveRDS(out, paste(project_path, "outputs/models/combined_models.RDS", sep="/"))
# clean up
rm(list = ls())
# Load the .yml files
configs <- read_yaml('configuration/corpus_config.yml')
training_plan <- read_yaml('configuration/training_config.yml')
project_path <- paste('projects', configs$project_details$name, sep="/")
# Load the compbined RDS file of the trained models
models <- readRDS(paste(project_path, "outputs/models/combined_models.RDS", sep="/"))
# for each value of K, we need mean values of exclusivity and semantic coherence
K <- c(5, 10, 15, 20, 25) # note: will need to replace this later.
exc <- as.data.frame(do.call(rbind, models$exclusivity))
semcoh<- as.data.frame(do.call(rbind, models$semcoh))
exc_means <- rowMeans(exc)
semcoh_means <- rowMeans(semcoh)
out <- data.frame(K, exc_means, semcoh_means)
colnames(out) <- c("K","exclus","semcoh")
exc_v_semcoh <- ggplot(out, aes(x=semcoh, y=exclus))+
geom_point() +
geom_text(
label=out$K,
nudge_x = 0.5,
check_overlap = TRUE) +
labs(x = "Semantic coherence", y = "Exclusivity", title = "Mean exclusivity vs. semantic coherence for trained models")
exc_v_semcoh
View(training_plan)
exc_v_semcoh
key <- seq(training_plan$K_value_range$min_K, training_plan$K_value_range$max_K, training_plan$K_value_range$K_interval)
summary(out)
summary(models)
summary(models$runout[[1]])
summary(models$runout[[0]])
summary(models$runout[[1]])
summary(models$runout[[2]])
summary(models$runout[[3]])
summary(models$runout[[4]])
summary(models$runout[[5]])
View(models)
models$runout[[1]][['settings']][['dim']][['K']]
K_test <- as.data.frame(do.call(rbind, models$runout[[1]][['settings']][['dim']][['K']]))
models$runout[[0]][['settings']][['dim']][['K']]
models$runout[[1]][['settings']][['dim']][['K']]
models$runout[[2]][['settings']][['dim']][['K']]
seq_along(models$runout)
# K<- seq(training_plan$K_value_range$min_K, training_plan$K_value_range$max_K, training_plan$K_value_range$K_interval)
for (i in seq_along(models$runout)){
print(models$runout[[i]][['settings']][['dim']][['K']])
}
View(exc)
models[["exclusivity"]][[2]]
models[["exclusivity"]][[1]]
models[["exclusivity"]][[3]]
models[["exclusivity"]][[4]]
K <- list()
for (i in seq_along(models$runout)){
K <- append(K, models$runout[[i]][['settings']][['dim']][['K']])
}
View(exc)
exc_means <- list()
for (i in seq_along(models$exclusivity)){
exc_means  <- append(exc_means, rowMeans(models$exclusivity[[i]]))
}
exc_means <- list()
for (i in seq_along(models$exclusivity)){
exc_means  <- append(exc_means, models$exclusivity[[i]])
}
View(exc_means)
models[["exclusivity"]][[4]]
models[["exclusivity"]][[1]]
seq_along(models$exclusivity)
for (i in seq_along(models$exclusivity)){
values  <- models$exclusivity[[i]]
#exec_means <- append(exec_means, mean(values))
}
mean(values)
exc_means <- list()
for (i in seq_along(models$exclusivity)){
values  <- models$exclusivity[[i]]
exec_means <- append(exec_means, mean(values))
}
exc_means <- list()
for (i in seq_along(models$exclusivity)){
values  <- models$exclusivity[[i]]
exc_means <- append(exc_means, mean(values))
}
semcoh_means <- list()
for (i in seq_along(models$semcoh)){
values  <- models$semcoh[[i]]
semcoh_means <- append(semcoh_means, mean(values))
}
View(out)
out <- data.frame(K, exc_means, semcoh_means)
colnames(out) <- c("K","exclus","semcoh")
View(out)
out <- as.data.frame(K, exc_means, semcoh_means)
out <- data.frame(K, exc_means, semcoh_means)
out <- do.call(rbind(K, exc_means, semcoh_means))
out <- data.frame(K = K, "Exclusivity" = exc_means, "Semantic coherence" = semcoh_means)
out <- data.frame(K = K, "Exclusivity" = exc_means, "Semantic coherence" = semcoh_means)
View(out)
library(dplyr)
install.packages("dplyr")
library(dplyr)
out <- bind_rows(K, exc_means, semcoh_means)
out <- bind_cols(K, exc_means, semcoh_means)
View(out)
out <- bind_rows(K, exc_means, semcoh_means)
out <- do.call(rbind.data.frame, Map('c', K, exc_means, semcoh_means))
View(out)
colnames(out) <- c("K","exclus","semcoh")
View(out)
out <- out[order(K),]
out <- out[order(out$K),]
View(out)
exc_v_semcoh <- ggplot(out, aes(x=semcoh, y=exclus))+
geom_point() +
geom_text(
label = out$K,
nudge_x = 0.5,
check_overlap = TRUE) +
labs(x = "Semantic coherence", y = "Exclusivity", title = "Mean exclusivity vs. semantic coherence for trained models")
exc_v_semcoh
plot(out)
plotModels(out)
library(igraph)
pdf(file = paste0(visualizations_path, "exc_v_semcoh.pdf"), width = 12, height = 8)
visualizations_path <- paste(project_path, 'outputs/visualizations/', sep="/")
pdf(file = paste0(visualizations_path, "exc_v_semcoh.pdf"), width = 12, height = 8)
exc_v_semcoh
dev.off()
rm(list = ls())
# Requirements
library(stm)
library(yaml)
library(ggplot2)
library(igraph)
working_directory <- Sys.getenv("working_path")
# make sure we are in the right directory
setwd(working_directory)
# Load the .yml files
configs <- read_yaml('configuration/corpus_config.yml')
training_plan <- read_yaml('configuration/training_config.yml')
project_path <- paste('projects', configs$project_details$name, sep="/")
visualizations_path <- paste(project_path, 'outputs/visualizations/', sep="/")
# Load the compbined RDS file of the trained models
models <- readRDS(paste(project_path, "outputs/models/combined_models.RDS", sep="/"))
# for each value of K, we need mean values of exclusivity and semantic coherence
K <- list()
for (i in seq_along(models$runout)){
K <- append(K, models$runout[[i]][['settings']][['dim']][['K']])
}
exc_means <- list()
for (i in seq_along(models$exclusivity)){
values  <- models$exclusivity[[i]]
exc_means <- append(exc_means, mean(values))
}
semcoh_means <- list()
for (i in seq_along(models$semcoh)){
values  <- models$semcoh[[i]]
semcoh_means <- append(semcoh_means, mean(values))
}
out <- do.call(rbind.data.frame, Map('c', K, exc_means, semcoh_means))
colnames(out) <- c("K","exclus","semcoh")
out <- out[order(out$K),]
exc_v_semcoh <- ggplot(out, aes(x=semcoh, y=exclus))+
geom_point() +
geom_text(
label = out$K,
nudge_x = 0.5,
check_overlap = TRUE) +
labs(x = "Semantic coherence", y = "Exclusivity", title = "Mean exclusivity vs. semantic coherence for trained models")
pdf(file = paste0(visualizations_path, "exc_v_semcoh.pdf"), width = 12, height = 8)
exc_v_semcoh
dev.off()
# to keepfile size down, remove the models file
rm(models)
#save an R image
save.image(paste(project_path, "outputs/visualizations.RData", sep="/"))
#clean up
rm(list = ls())
gc()
